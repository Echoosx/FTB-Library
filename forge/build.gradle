plugins {
	id "com.github.johnrengelman.shadow" version "7.0.0"
	id "com.matthewprenger.cursegradle" version "1.4.0"
}

def ENV = System.getenv()

architectury {
	platformSetupLoomIde()
	forge()
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common
	dev
}

loom {
	forge {
		mixinConfigs = [
				/*"ftblibrary-forge.mixins.json", */
				"ftblibrary-common.mixins.json"
		]
	}
}

artifacts {
	dev(jar)
}

repositories {
	maven {
		name "ModMaven (JEI)"
		url "https://modmaven.dev/"
		content {
			includeGroup "mezz.jei"
		}
	}
}

dependencies {
	forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"

	modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

//	modCompileOnly "mezz.jei:jei-1.18:${rootProject.forge_jei_version}"
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-forge:${rootProject.rei_version}"

	/*modImplementation("dev.ftb.mods:ftb-teams-forge:1605.2.1-build.13") {
		transitive = false
	}
	modImplementation("dev.latvian.mods:item-filters-forge:1605.2.5-build.4") {
		transitive = false
	}
	modImplementation("dev.ftb.mods:ftb-quests-forge:1605.3.3-build.49") {
		transitive = false
	}*/

	common(project(path: ":common", configuration: "dev")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

processResources {
	inputs.property "version", project.version
	inputs.property "archversion", project.architectury_version
	inputs.property "forgeversion", project.forge_version
	inputs.property "forgeshortversion", project.forge_version.split("\\.")[0]
	inputs.property "mcversion", project.minecraft_version

	filesMatching("META-INF/mods.toml") {
		expand "version": project.version
		expand "archversion": project.architectury_version
		expand "forgeversion": project.forge_version
		expand "forgeshortversion": project.forge_version.split("\\.")[0]
		expand "mcversion": project.minecraft_version
	}
}

shadowJar {
	exclude "fabric.mod.json"

	configurations = [project.configurations.shadowCommon]
	classifier "dev-shadow"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
	archiveBaseName.set "${rootProject.archives_base_name}-${project.name}"
	archiveClassifier.set null
}

jar {
	manifest {
		attributes([
				"Specification-Title"     : project.mod_id,
				"Specification-Vendor"    : project.mod_author,
				"Specification-Version"   : "1",
				"Implementation-Title"    : project.name,
				"Implementation-Version"  : version,
				"Implementation-Vendor"   : project.mod_author,
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}

	classifier "dev"
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

if (ENV.CURSEFORGE_KEY) {
	curseforge {
		apiKey = ENV.CURSEFORGE_KEY
		project {
			id = project.curseforge_id_forge
			releaseType = project.curseforge_type
			addGameVersion "Forge"
			addGameVersion "1.19"
			mainArtifact(remapJar.archivePath)
			relations {
				requiredDependency 'architectury-api'
				optionalDependency 'jei'
				optionalDependency 'roughly-enough-items'
			}
			changelog = getGitChangelog
			changelogType = 'markdown'
		}
	}
}

publishing {
	publications {
		mavenForge(MavenPublication) {
			artifactId = "${rootProject.archives_base_name}-${project.name}"
			from components.java
		}
	}

	repositories {
		if (ENV.FTB_MAVEN_TOKEN) {
			maven {
				url "https://maven.ftb.dev/release"
				credentials {
					username = "ftb"
					password = "${ENV.FTB_MAVEN_TOKEN}"
				}
			}
		}

		if (ENV.SAPS_TOKEN) {
			maven {
				url "https://maven.saps.dev/minecraft"
				credentials {
					username = "ftb"
					password = "${ENV.SAPS_TOKEN}"
				}
			}
		}
	}
}

rootProject.tasks.getByName("curseforgePublish").dependsOn tasks.getByName("curseforge")
